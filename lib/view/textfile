// ? Container(
                //     height: screenHeight,
                //     child: Center(
                //       child: Consumer<ProviderClass>(
                //         builder: (context, provider, child) {
                //           List<Food> selectedItems = provider.selectedItems;

                //           return ListView.builder(
                //             itemCount: selectedItems.length,
                //             itemBuilder: (context, index) {
                //               var currentItem = selectedItems[index];
                //               return Padding(
                //                 padding: const EdgeInsets.all(8.0),
                //                 child: Container(
                //                   decoration:
                //                       BoxDecoration(border: Border.all()),
                //                   child: Column(
                //                     children: [
                //                       Text(
                //                           currentItem.productName ?? "Default"),
                //                       Padding(
                //                         padding: const EdgeInsets.all(8.0),
                //                         child: Row(
                //                           children: [
                //                             Container(
                //                               decoration: BoxDecoration(
                //                                 color: const Color.fromARGB(
                //                                     255, 228, 228, 228),
                //                               ),
                //                               child: InkWell(
                //                                 onTap: () {},
                //                                 child: Icon(
                //                                   Icons.add,
                //                                   color: Colors.black,
                //                                   size: 15,
                //                                 ),
                //                               ),
                //                             ),
                //                             Text(
                //                               "${Provider.of<ProviderClass>(context, listen: false).selectedItems[index].count}",
                //                             ),
                //                             Spacer(),
                //                             Text(
                //                               "Price: ${currentItem.price} * ${selectedItems[index].count} = ${(double.parse(currentItem.price!) * (selectedItems[index].count ?? 0).toDouble())}",
                //                             ),
                //                             Container(
                //                               decoration: BoxDecoration(
                //                                 color: const Color.fromARGB(
                //                                     255, 228, 228, 228),
                //                               ),
                //                               child: InkWell(
                //                                 onTap: () {
                //                                   // Handle decrement logic
                //                                   // Similar to your cart page
                //                                 },
                //                                 child: Icon(
                //                                   Icons.minimize,
                //                                   color: Colors.black,
                //                                   size: 15,
                //                                 ),
                //                               ),
                //                             ),
                //                           ],
                //                         ),
                //                       ),
                //                       IconButton(
                //                         onPressed: () {
                //                           Provider.of<ProviderClass>(context,
                //                                   listen: false)
                //                               .removeFromcart(
                //                                   index: index,
                //                                   currentCount: currentCount,
                //                                   priceofItem:
                //                                       selectedItems[index]
                //                                           .price);
                //                         },
                //                         icon: Icon(Icons.delete),
                //                       ),
                //                     ],
                //                   ),
                //                 ),
                //               );
                //             },
                //           );
                //         },
                //       ),
                //     ),
                //   )
                // -----------------------------------------------------------------------------------------
                // invoice with border
                import 'package:flutter/material.dart';
// import 'package:flutter_application_1/controller/provider.dart';
// import 'package:provider/provider.dart';

// class Invoice extends StatefulWidget {
//   const Invoice({Key? key}) : super(key: key);

//   @override
//   State<Invoice> createState() => _InvoiceState();
// }

// class _InvoiceState extends State<Invoice> {
//   List<String> rowHeading = ["ID", "NAME", "PRICE", "COUNT", "RATE"];

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       body: Column(
//         children: [
//           Table(
//             border: TableBorder.all(color: Colors.black),
//             children: [
//               TableRow(
//                 decoration: BoxDecoration(color: Colors.grey),
//                 children: rowHeading
//                     .map(
//                       (heading) => TableCell(
//                         child: Padding(
//                           padding: const EdgeInsets.all(8.0),
//                           child: Container(
//                             child: Text(
//                               heading,
//                               style: TextStyle(
//                                 fontWeight: FontWeight.bold,
//                                 fontSize: 18,
//                               ),
//                             ),
//                           ),
//                         ),
//                       ),
//                     )
//                     .toList(),
//               ),
//             ],
//           ),
//           Expanded(
//             child: ListView.builder(
//               itemCount: Provider.of<ProviderClass>(context).selectedItems.length,
//               itemBuilder: (context, index) {
//                 var selectedItem = Provider.of<ProviderClass>(context).selectedItems[index];
//                 List<dynamic> rowContent = [
//                   selectedItem.id,
//                   selectedItem.productName,
//                   selectedItem.price,
//                   selectedItem.count,
//                   selectedItem.price // Not sure if 'rate' is meant to be used here
//                 ];

//                 return Table(
//                   border: TableBorder.all(color: Colors.black),
//                   children: [
//                     TableRow(
//                       children: rowContent
//                           .map(
//                             (content) => TableCell(
//                               child: Padding(
//                                 padding: const EdgeInsets.all(8.0),
//                                 child: Container(
//                                   child: Text(
//                                     "$content",
//                                     style: TextStyle(
//                                       fontWeight: FontWeight.bold,
//                                       fontSize: 18,
//                                     ),
//                                   ),
//                                 ),
//                               ),
//                             ),
//                           )
//                           .toList(),
//                     ),
//                   ],
//                 );
//               },
//             ),
//           ),
//         ],
//       ),
//     );
//   }
// }




// import 'package:flutter/material.dart';
// import 'package:flutter_application_1/controller/provider.dart';
// import 'package:flutter_application_1/model/model.dart';
// import 'package:flutter_application_1/utils/color_Constants.dart';
// import 'package:flutter_application_1/view/Cart_pages/cartDineIn.dart';
// import 'package:flutter_application_1/view/Cart_pages/cartTakeAway.dart';
// import 'package:flutter_application_1/view/Home.dart';
// import 'package:flutter_application_1/view/categories.dart';
// import 'package:flutter_application_1/view/Invoice_Pages/invoice.dart';
// import 'package:flutter_application_1/widgets/CustomFloatingActionButtonForcart.dart';
// import 'package:flutter_application_1/widgets/CustomeButton.dart';
// import 'package:provider/provider.dart';
// import 'package:lottie/lottie.dart';

// var currentCount = 1;

// class CartPage extends StatefulWidget {
//   @override
//   State<CartPage> createState() => _CartPageState();
// }

// class _CartPageState extends State<CartPage>
//     with SingleTickerProviderStateMixin {
//   late TabController tabController;

//   @override
//   void initState() {
//     super.initState();
//     tabController = TabController(length: 2, vsync: this);
//   }

//   @override
//   void dispose() {
//     tabController.dispose();
//     super.dispose();
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         backgroundColor: Colors.black,
//         title: Text("Cart"),
//         leading: ElevatedButton(
//           style: ButtonStyle(
//             backgroundColor: MaterialStatePropertyAll(ColorsUsed.buttonColor),
//           ),
//           onPressed: () {
//             print(
//                 "${Provider.of<ProviderClass>(context, listen: false).selectedIds}");
//             Navigator.pushReplacement(
//               context,
//               MaterialPageRoute(
//                 builder: (context) => CategoriesPage(),
//               ),
//             );
//           },
//           child: Icon(Icons.arrow_back),
//         ),
//         bottom: TabBar(
//           indicatorColor: Colors.white,
//           controller: tabController,
//           tabs: [
//             Tab(text: "Dine In cart"),
//             Tab(text: "Take Away cart"),
//           ],
//         ),
//       ),
//       body: TabBarView(
//         controller: tabController,
//         children: [
//           buildTabContent(isDineIn: true),
//           buildTabContent(isDineIn: false),
//         ],
//       ),
//     );
//   }

//   Widget buildTabContent({required bool isDineIn}) {
//     if (isDineIn) {
//       if (Provider.of<ProviderClass>(context).selectedItemsForDineIn.isEmpty) {
//         return Center(
//           child: Container(
//             height: MediaQuery.sizeOf(context).height * .1,
//             child: Lottie.asset('assets/Animation - 1702448401276.json'),
//           ),
//         );
//       } else {
//         return CartDineIn();
//       }
//     } else {
//       if (Provider.of<ProviderClass>(context).tabchoice == false) {
//         if (Provider.of<ProviderClass>(context)
//             .selectedItemsForTakeAway
//             .isEmpty) {
//           return Column(
//             mainAxisAlignment: MainAxisAlignment.center,
//             children: [
//               Center(
//                 child: Container(
//                   height: MediaQuery.sizeOf(context).height * .1,
//                   child: Lottie.asset('assets/Animation - 1702448401276.json'),
//                 ),
//               ),
//             ],
//           );
//         } else {
//           return CartTakeAway();
//         }
//       }
//     }

//     return Container();
//   }
// }
 // void addtoCart({required List<int?> ids}) {
  //   List<Food>? allItems = responseData?.food;
  //   List<Food> selectedItemsList =
  //       tabchoice! ? selectedItemsForDineIn : selectedItemsForTakeAway;
  //   for (int? id in ids) {
  //     if (id != null) {
  //       bool itemExists = selectedItemsList.any((item) => item.id == id);

  //       if (!itemExists) {
  //         var newItem = allItems?.firstWhere((item) => id == item.id,
  //             orElse: () => Food());

  //         newItem?.isEnabled = !sharedDisabledIds.contains(id);

  //         selectedItemsList.add(newItem ?? Food());

  //         sharedDisabledIds.add(id);
  //       }
  //     }
  //   }

  //   notifyListeners();

  // 

  // Future<void> decrement({
  //   required int id,
  //   required int currentCount,
  //   required dynamic priceofItem, // Assuming priceofItem can be of any type
  // }) async {
  //   var selectedItem = selectedItems.firstWhere((item) => item.id == id);

  //   if (currentCount > 1) {
  //     selectedItem.count = currentCount - 1;
  //     double priceInt = double.parse(
  //         priceofItem.toString()); // Assuming priceofItem is a string
  //     double decrementSum = 1 * priceInt;
  //     totalSum -= decrementSum;
  //     print("Total Sum: $totalSum");
  //   } else {
  //     removeFromcart(
  //       id: id,
  //       currentCount: currentCount,
  //       priceofItem: priceofItem,
  //       isTakeAwayActive: selectedItem.isTakeAwayActive,
  //     );
  //   }

  //   notifyListeners();
  // }


  // 

  // void addToTableOrder({
  //   required int tableNumber,
  // }) {
  //   print("addToTableOrder invoked with tableNumber: $tableNumber");

  //   // Check the current mode based on the isTakeAwayActive property
  //   bool isTakeAwayActive = tabchoice ?? false;

  //   // Choose the appropriate list based on isTakeAwayActive
  //   List<Food> selectedItemList =
  //       isTakeAwayActive ? selectedItemsForTakeAway : selectedItemsForDineIn;

  //   // Create a new map if the table number is not already present
  //   tableOrders[tableNumber] ??= {'fortakeaway': [], 'fordinein': []};

  //   // Create new lists for each table
  //   List<Food> selectedItemsForTakeAwayCopy =
  //       List.from(selectedItemsForTakeAway);
  //   List<Food> selectedItemsForDineInCopy = List.from(selectedItemsForDineIn);

  //   // Add selected items to the map
  //   tableOrders[tableNumber]!['fortakeaway'] =
  //       List.from(selectedItemsForTakeAwayCopy);
  //   tableOrders[tableNumber]!['fordinein'] =
  //       List.from(selectedItemsForDineInCopy);

  //   // Print the contents of the map
  //   print("tableOrders: $tableOrders");

  //   notifyListeners();
  // }
  // void addToTableOrder({required int tableNumber, isTakeAwayActive = false}) {
  //   print("addToTableOrder invoked with tableNumber: $tableNumber");

  //   // bool isTakeAwayActive = tabchoice ?? false;
  //   print("for you istakeAwayActive =====$isTakeAwayActive");
  //   List<Food> selectedItemList =
  //       isTakeAwayActive! ? selectedItemsForTakeAway : selectedItemsForDineIn;

  //   tableOrders[tableNumber] ??= {'fortakeaway': [], 'fordinein': []};

  //   List<Food> selectedItemsForTakeAwayCopy =
  //       List.from(selectedItemsForTakeAway);
  //   List<Food> selectedItemsForDineInCopy = List.from(selectedItemsForDineIn);

  //   if (isTakeAwayActive!) {
  //     tableOrders[tableNumber]!['fortakeaway'] = List.from(selectedItemList);
  //   } else {
  //     tableOrders[tableNumber]!['fordinein'] = List.from(selectedItemList);
  //   }

  //   print("tableOrders: $tableOrders");

  //   notifyListeners();
  // }
// 

  // void addtoCart({required List<Map<dynamic, dynamic>> itemsToAdd}) {
  //   print(itemsToAdd);
  //   selectedItemsForDineIn_temperory.clear();

  //   List<Food>? allItems = responseData?.food;

  //   for (var itemData in itemsToAdd) {
  //     int id = itemData['id'] as int;
  //     bool isTakeAwayActiveValue = itemData['isTakeAway'] as bool;

  //     bool itemExists = isTakeAwayActiveValue
  //         ? selectedItemsForTakeAway.any((item) => item.id == id)
  //         : selectedItemsForDineIn.any((item) => item.id == id);
  //     if (!itemExists) {
  //       var newItem =
  //           allItems?.firstWhere((item) => id == item.id, orElse: () => Food());
  //       newItem?.isEnabled = !sharedDisabledIds.contains(id);
  //       if (isTakeAwayActiveValue) {
  //         selectedItemsForTakeAway.add(newItem!);
  //       } else {
  //         selectedItemsForDineIn.add(newItem!);
  //       }
  //       sharedDisabledIds.add(id);
  //       selectedItems.add(newItem);
  //     }
  //   }
  //   selectedItemsForDineIn.forEach((food) {
  //     print(food.productName);
  //   });
  //   selectedItemsForDineIn.forEach((food) {
  //     selectedItemsForDineIn_temperory.add("$food");
  //     print("for checking  ${food.productName}");
  //   });

  //   //   mapping(
  //   //       selectedTableIndex: selectedTableIndex,
  //   //       selectedItemsForTakeAway: selectedItemsForTakeAway,
  //   //       selectedItemsForDineIn_temperory: selectedItemsForDineIn_temperory);

  //   //   notifyListeners();
  // }

  // void mapping(
  //     {required selectedTableIndex,
  //     required selectedItemsForDineIn_temperory,
  //     required selectedItemsForTakeAway}) {
  //   print(selectedItemsForDineIn_temperory);

  //   cartMap['$selectedTableIndex'] = cart;
  //   // print("selecteditemsdForTakeAway ${selectedItemsForTakeAway}");
  //   // print("selectedItemsForDineIn ${selectedItemsForDineIn}");
  //   // print("hey ${cartMap}");

  //   // cartMap.forEach((key, value) {
  //   //   print("Key: $key");
  //   //   print("  dineIn: ${value['dineIn']}");
  //   //   print("  takeAway: ${value['takeAway']}");
  //   // });
  //   selectedItemsForDineIn_temperory.clear();
  //   // print(selectedItemsForDineIn_temperory);
  //   notifyListeners();
  // }
// 

  // void addtoCart({required List<Map<String, dynamic>> itemsToAdd}) {
  //   cartMap[selectedTableIndex] ??= {'dineIn': [], 'takeAway': []};

  //   print("table index is $selectedTableIndex");
  //   print("item to add is: $itemsToAdd");
  //   List<Food>? allItems = responseData?.food;

  //   for (var itemData in itemsToAdd) {
  //     int id = itemData['id'] as int;
  //     bool isTakeAwayActiveValue = itemData['isTakeAway'] as bool;

  //     bool itemExists = isTakeAwayActiveValue
  //         ? cartMap[selectedTableIndex]!['dineIn']!.any((item) => item.id == id)
  //         : cartMap[selectedTableIndex]!['takeAway']!
  //             .any((item) => item.id == id);

  //     if (!itemExists) {
  //       var newItem =
  //           allItems?.firstWhere((item) => item.id == id, orElse: () => Food());

  //       if (newItem != null) {
  //         newItem.isEnabled = !sharedDisabledIds.contains(id);

  //         if (isTakeAwayActiveValue) {
  //           cartMap[selectedTableIndex]!['takeAway']!.add(newItem);
  //         } else {
  //           cartMap[selectedTableIndex]!['dineIn']!.add(newItem);
  //         }
  //       }
  //     }
  //   }

  //   cartMap.forEach((tableIndex, tableData) {
  //     print("Table Index: $tableIndex");
  //     tableData.forEach((category, items) {
  //       print("  Category: $category");
  //       items.forEach((food) {
  //         print("    Food: ${food.productName}, ID: ${food.id}");
  //       });
  //     });
  //   });

  //   notifyListeners();
  // }
